/*
using System;
using System.Collections.Generic;
using System.Text;

namespace Algorithm
{
    class MyList<T> // 동적배열 구현
    {
        const int DEFAULT_SIZE = 1;
        T[] _data = new T[DEFAULT_SIZE];

        public int Count = 0; //실제로 사용중인 데이터 개수
        public int Capacity { get {return _data.Length;} }; // 예약된 데이터 개수
    
        public void Add(T item) // 시간복잡도 계산 
        {                       // -무시함ㅋ O(1), 예외케이스. 이사비용 무시.
                                // 데이터가 2배씩 계속 늘어나기 때문에 거의 29번째 줄부터만 시작되므로 O(1)임.
            //1. 크기가 충분한지 체크
            if(Count >= Capacity)
            {
                //공간 늘려서 확보하기
                T[] newArray = new T[Count * 2]; // 새 배열 생성
                for (int i = 0; i < Count; i++)
                    newArray[i] = _data[i]; //기존 데이터 옮기기
                _data = newArray;
            }

            //2. 배열의 마지막 공간에 데이터 넣기
            _data[Count] = item;
            Count++;
        }

        public T this[int index] // 인덱서구현 시간복잡도 - O(1), 상수
        {
            get { return _data[index];}
            set { _data[index] = value;}
        }
    
        public void RemoveAt(int index) //삭제 구현 
        {   // 시간복잡도 - 데이터에 비례한 for문. 최악의경우 0~N-1까지 돌아가니까 O(N)
            for (int i = index; i < Count - 1; i++)
                _data[i] = _data[i + 1];
            _data[Count - 1] = dafault(T); // 타입에 맞는 초기값으로 밀어줌
            Count--;
        }
    }



    class Board
    {
        public int[] _data = new int[25]; //배열
        public List<int> _data2 = new List<int>(); //동적 배열
        public LinkedList<int> _data3 = new LinkedList<int>(); //연결리스트

        public void Initialize()
        {
            _data2.Add(101); //추가
            _data2.Add(102);
            _data2.Add(103);
            _data2.Add(104);
            _data2.Add(105);

            int temp = _data2[2]; //3번째 데이터 가져오기

            _data.RemoveAt(2); //3번째 데이터 삭제

        }
    }
} */